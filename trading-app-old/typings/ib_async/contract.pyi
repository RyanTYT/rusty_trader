import datetime as dt
from dataclasses import dataclass
from typing import NamedTuple, Any


@dataclass
class DeltaNeutralContract:
    conId: int = ...
    delta: float = ...
    price: float = ...
    # def __init__(self, conId=..., delta=..., price=...) -> None: ...


@dataclass
class Contract:
    secType: str = ...
    conId: int = ...
    symbol: str = ...
    lastTradeDateOrContractMonth: str = ...
    strike: float = ...
    right: str = ...
    multiplier: str = ...
    exchange: str = ...
    primaryExchange: str = ...
    currency: str = ...
    localSymbol: str = ...
    tradingClass: str = ...
    includeExpired: bool = ...
    secIdType: str = ...
    secId: str = ...
    description: str = ...
    issuerId: str = ...
    comboLegsDescrip: str = ...
    comboLegs: list['ComboLeg'] = ...
    deltaNeutralContract: DeltaNeutralContract | None = ...
    # @staticmethod
    # def create(**kwargs: Any) -> Contract: ...
    # def isHashable(self) -> bool: ...
    # def __eq__(self, other): ...
    # def __hash__(self): ...
    # def __init__(self, secType=..., conId=..., symbol=..., lastTradeDateOrContractMonth=..., strike=..., right=..., multiplier=..., exchange=..., primaryExchange=..., currency=..., localSymbol=..., tradingClass=..., includeExpired=..., secIdType=..., secId=..., description=..., issuerId=..., comboLegsDescrip=..., comboLegs=..., deltaNeutralContract=...) -> None: ...


class Stock(Contract):
    def __init__(self, symbol: str = '', exchange: str = '', currency: str = '', **kwargs: Any) -> None: ...


class Option(Contract):
    def __init__(self, symbol: str = '', lastTradeDateOrContractMonth: str = '', strike: float = 0.0, right: str = '', exchange: str = '', multiplier: str = '', currency: str = '', **kwargs: Any) -> None: ...


class Future(Contract):
    def __init__(self, symbol: str = '', lastTradeDateOrContractMonth: str = '', exchange: str = '', localSymbol: str = '', multiplier: str = '', currency: str = '', **kwargs: Any) -> None: ...


class ContFuture(Contract):
    def __init__(self, symbol: str = '', exchange: str = '', localSymbol: str = '', multiplier: str = '', currency: str = '', **kwargs: Any) -> None: ...


class Forex(Contract):
    def __init__(self, pair: str = '', exchange: str = 'IDEALPRO', symbol: str = '', currency: str = '', **kwargs: Any) -> None: ...
    def pair(self) -> str: ...


class Index(Contract):
    def __init__(self, symbol: str = '', exchange: str = '', currency: str = '', **kwargs: Any) -> None: ...


class CFD(Contract):
    def __init__(self, symbol: str = '', exchange: str = '', currency: str = '', **kwargs: Any) -> None: ...


class Commodity(Contract):
    def __init__(self, symbol: str = '', exchange: str = '', currency: str = '', **kwargs: Any) -> None: ...


class Bond(Contract):
    def __init__(self, **kwargs: Any) -> None: ...


class FuturesOption(Contract):
    def __init__(self, symbol: str = '', lastTradeDateOrContractMonth: str = '', strike: float = 0.0, right: str = '', exchange: str = '', multiplier: str = '', currency: str = '', **kwargs: Any) -> None: ...


class MutualFund(Contract):
    def __init__(self, **kwargs: Any) -> None: ...


class Warrant(Contract):
    def __init__(self, **kwargs: Any) -> None: ...


class Bag(Contract):
    def __init__(self, **kwargs: Any) -> None: ...


class Crypto(Contract):
    def __init__(self, symbol: str = '', exchange: str = '', currency: str = '', **kwargs: Any) -> None: ...


class TagValue(NamedTuple):
    tag: str
    value: str


@dataclass
class ComboLeg:
    conId: int = ...
    ratio: int = ...
    action: str = ...
    exchange: str = ...
    openClose: int = ...
    shortSaleSlot: int = ...
    designatedLocation: str = ...
    exemptCode: int = ...
    # def __init__(self, conId=..., ratio=..., action=..., exchange=..., openClose=..., shortSaleSlot=..., designatedLocation=..., exemptCode=...) -> None: ...


class TradingSession(NamedTuple):
    start: dt.datetime
    end: dt.datetime


@dataclass
class ContractDetails:
    contract: Contract | None = ...
    marketName: str = ...
    minTick: float = ...
    orderTypes: str = ...
    validExchanges: str = ...
    priceMagnifier: int = ...
    underConId: int = ...
    longName: str = ...
    contractMonth: str = ...
    industry: str = ...
    category: str = ...
    subcategory: str = ...
    timeZoneId: str = ...
    tradingHours: str = ...
    liquidHours: str = ...
    evRule: str = ...
    evMultiplier: int = ...
    mdSizeMultiplier: int = ...
    aggGroup: int = ...
    underSymbol: str = ...
    underSecType: str = ...
    marketRuleIds: str = ...
    secIdList: list[TagValue] = ...
    realExpirationDate: str = ...
    lastTradeTime: str = ...
    stockType: str = ...
    minSize: float = ...
    sizeIncrement: float = ...
    suggestedSizeIncrement: float = ...
    cusip: str = ...
    ratings: str = ...
    descAppend: str = ...
    bondType: str = ...
    couponType: str = ...
    callable: bool = ...
    putable: bool = ...
    coupon: float = ...
    convertible: bool = ...
    maturity: str = ...
    issueDate: str = ...
    nextOptionDate: str = ...
    nextOptionType: str = ...
    nextOptionPartial: bool = ...
    notes: str = ...
    def tradingSessions(self) -> list[TradingSession]: ...
    def liquidSessions(self) -> list[TradingSession]: ...
    # def __init__(self, contract=..., marketName=..., minTick=..., orderTypes=..., validExchanges=..., priceMagnifier=..., underConId=..., longName=..., contractMonth=..., industry=..., category=..., subcategory=..., timeZoneId=..., tradingHours=..., liquidHours=..., evRule=..., evMultiplier=..., mdSizeMultiplier=..., aggGroup=..., underSymbol=..., underSecType=..., marketRuleIds=..., secIdList=..., realExpirationDate=..., lastTradeTime=..., stockType=..., minSize=..., sizeIncrement=..., suggestedSizeIncrement=..., cusip=..., ratings=..., descAppend=..., bondType=..., couponType=..., callable=..., putable=..., coupon=..., convertible=..., maturity=..., issueDate=..., nextOptionDate=..., nextOptionType=..., nextOptionPartial=..., notes=...) -> None: ...


@dataclass
class ContractDescription:
    contract: Contract | None = ...
    derivativeSecTypes: list[str] = ...
    # def __init__(self, contract=..., derivativeSecTypes=...) -> None: ...


@dataclass
class ScanData:
    rank: int
    contractDetails: ContractDetails
    distance: str
    benchmark: str
    projection: str
    legsStr: str
    # def __init__(self, rank, contractDetails, distance, benchmark, projection, legsStr) -> None: ...
