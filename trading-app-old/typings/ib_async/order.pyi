from .contract import Contract as Contract, TagValue as TagValue
from .objects import Fill as Fill, SoftDollarTier as SoftDollarTier, TradeLogEntry as TradeLogEntry
from .util import UNSET_DOUBLE as UNSET_DOUBLE, UNSET_INTEGER as UNSET_INTEGER, dataclassNonDefaults as dataclassNonDefaults
from dataclasses import dataclass
from typing import ClassVar, NamedTuple, Any

@dataclass
class Order:
    orderId: int = ...
    clientId: int = ...
    permId: int = ...
    action: str = ...
    totalQuantity: float = ...
    orderType: str = ...
    lmtPrice: float = ...
    auxPrice: float = ...
    tif: str = ...
    activeStartTime: str = ...
    activeStopTime: str = ...
    ocaGroup: str = ...
    ocaType: int = ...
    orderRef: str = ...
    transmit: bool = ...
    parentId: int = ...
    blockOrder: bool = ...
    sweepToFill: bool = ...
    displaySize: int = ...
    triggerMethod: int = ...
    outsideRth: bool = ...
    hidden: bool = ...
    goodAfterTime: str = ...
    goodTillDate: str = ...
    rule80A: str = ...
    allOrNone: bool = ...
    minQty: int = ...
    percentOffset: float = ...
    overridePercentageConstraints: bool = ...
    trailStopPrice: float = ...
    trailingPercent: float = ...
    faGroup: str = ...
    faProfile: str = ...
    faMethod: str = ...
    faPercentage: str = ...
    designatedLocation: str = ...
    openClose: str = ...
    origin: int = ...
    shortSaleSlot: int = ...
    exemptCode: int = ...
    discretionaryAmt: float = ...
    eTradeOnly: bool = ...
    firmQuoteOnly: bool = ...
    nbboPriceCap: float = ...
    optOutSmartRouting: bool = ...
    auctionStrategy: int = ...
    startingPrice: float = ...
    stockRefPrice: float = ...
    delta: float = ...
    stockRangeLower: float = ...
    stockRangeUpper: float = ...
    randomizePrice: bool = ...
    randomizeSize: bool = ...
    volatility: float = ...
    volatilityType: int = ...
    deltaNeutralOrderType: str = ...
    deltaNeutralAuxPrice: float = ...
    deltaNeutralConId: int = ...
    deltaNeutralSettlingFirm: str = ...
    deltaNeutralClearingAccount: str = ...
    deltaNeutralClearingIntent: str = ...
    deltaNeutralOpenClose: str = ...
    deltaNeutralShortSale: bool = ...
    deltaNeutralShortSaleSlot: int = ...
    deltaNeutralDesignatedLocation: str = ...
    continuousUpdate: bool = ...
    referencePriceType: int = ...
    basisPoints: float = ...
    basisPointsType: int = ...
    scaleInitLevelSize: int = ...
    scaleSubsLevelSize: int = ...
    scalePriceIncrement: float = ...
    scalePriceAdjustValue: float = ...
    scalePriceAdjustInterval: int = ...
    scaleProfitOffset: float = ...
    scaleAutoReset: bool = ...
    scaleInitPosition: int = ...
    scaleInitFillQty: int = ...
    scaleRandomPercent: bool = ...
    scaleTable: str = ...
    hedgeType: str = ...
    hedgeParam: str = ...
    account: str = ...
    settlingFirm: str = ...
    clearingAccount: str = ...
    clearingIntent: str = ...
    algoStrategy: str = ...
    algoParams: list[TagValue] = ...
    smartComboRoutingParams: list[TagValue] = ...
    algoId: str = ...
    whatIf: bool = ...
    notHeld: bool = ...
    solicited: bool = ...
    modelCode: str = ...
    orderComboLegs: list['OrderComboLeg'] = ...
    orderMiscOptions: list[TagValue] = ...
    referenceContractId: int = ...
    peggedChangeAmount: float = ...
    isPeggedChangeAmountDecrease: bool = ...
    referenceChangeAmount: float = ...
    referenceExchangeId: str = ...
    adjustedOrderType: str = ...
    triggerPrice: float = ...
    adjustedStopPrice: float = ...
    adjustedStopLimitPrice: float = ...
    adjustedTrailingAmount: float = ...
    adjustableTrailingUnit: int = ...
    lmtPriceOffset: float = ...
    conditions: list['OrderCondition'] = ...
    conditionsCancelOrder: bool = ...
    conditionsIgnoreRth: bool = ...
    extOperator: str = ...
    softDollarTier: SoftDollarTier = ...
    cashQty: float = ...
    mifid2DecisionMaker: str = ...
    mifid2DecisionAlgo: str = ...
    mifid2ExecutionTrader: str = ...
    mifid2ExecutionAlgo: str = ...
    dontUseAutoPriceForHedge: bool = ...
    isOmsContainer: bool = ...
    discretionaryUpToLimitPrice: bool = ...
    autoCancelDate: str = ...
    filledQuantity: float = ...
    refFuturesConId: int = ...
    autoCancelParent: bool = ...
    shareholder: str = ...
    imbalanceOnly: bool = ...
    routeMarketableToBbo: bool = ...
    parentPermId: int = ...
    usePriceMgmtAlgo: bool = ...
    duration: int = ...
    postToAts: int = ...
    advancedErrorOverride: str = ...
    manualOrderTime: str = ...
    minTradeQty: int = ...
    minCompeteSize: int = ...
    competeAgainstBestOffset: float = ...
    midOffsetAtWhole: float = ...
    midOffsetAtHalf: float = ...
    # def __eq__(self, other): ...
    # def __hash__(self): ...
    # def __init__(self, orderId=..., clientId=..., permId=..., action=..., totalQuantity=..., orderType=..., lmtPrice=..., auxPrice=..., tif=..., activeStartTime=..., activeStopTime=..., ocaGroup=..., ocaType=..., orderRef=..., transmit=..., parentId=..., blockOrder=..., sweepToFill=..., displaySize=..., triggerMethod=..., outsideRth=..., hidden=..., goodAfterTime=..., goodTillDate=..., rule80A=..., allOrNone=..., minQty=..., percentOffset=..., overridePercentageConstraints=..., trailStopPrice=..., trailingPercent=..., faGroup=..., faProfile=..., faMethod=..., faPercentage=..., designatedLocation=..., openClose=..., origin=..., shortSaleSlot=..., exemptCode=..., discretionaryAmt=..., eTradeOnly=..., firmQuoteOnly=..., nbboPriceCap=..., optOutSmartRouting=..., auctionStrategy=..., startingPrice=..., stockRefPrice=..., delta=..., stockRangeLower=..., stockRangeUpper=..., randomizePrice=..., randomizeSize=..., volatility=..., volatilityType=..., deltaNeutralOrderType=..., deltaNeutralAuxPrice=..., deltaNeutralConId=..., deltaNeutralSettlingFirm=..., deltaNeutralClearingAccount=..., deltaNeutralClearingIntent=..., deltaNeutralOpenClose=..., deltaNeutralShortSale=..., deltaNeutralShortSaleSlot=..., deltaNeutralDesignatedLocation=..., continuousUpdate=..., referencePriceType=..., basisPoints=..., basisPointsType=..., scaleInitLevelSize=..., scaleSubsLevelSize=..., scalePriceIncrement=..., scalePriceAdjustValue=..., scalePriceAdjustInterval=..., scaleProfitOffset=..., scaleAutoReset=..., scaleInitPosition=..., scaleInitFillQty=..., scaleRandomPercent=..., scaleTable=..., hedgeType=..., hedgeParam=..., account=..., settlingFirm=..., clearingAccount=..., clearingIntent=..., algoStrategy=..., algoParams=..., smartComboRoutingParams=..., algoId=..., whatIf=..., notHeld=..., solicited=..., modelCode=..., orderComboLegs=..., orderMiscOptions=..., referenceContractId=..., peggedChangeAmount=..., isPeggedChangeAmountDecrease=..., referenceChangeAmount=..., referenceExchangeId=..., adjustedOrderType=..., triggerPrice=..., adjustedStopPrice=..., adjustedStopLimitPrice=..., adjustedTrailingAmount=..., adjustableTrailingUnit=..., lmtPriceOffset=..., conditions=..., conditionsCancelOrder=..., conditionsIgnoreRth=..., extOperator=..., softDollarTier=..., cashQty=..., mifid2DecisionMaker=..., mifid2DecisionAlgo=..., mifid2ExecutionTrader=..., mifid2ExecutionAlgo=..., dontUseAutoPriceForHedge=..., isOmsContainer=..., discretionaryUpToLimitPrice=..., autoCancelDate=..., filledQuantity=..., refFuturesConId=..., autoCancelParent=..., shareholder=..., imbalanceOnly=..., routeMarketableToBbo=..., parentPermId=..., usePriceMgmtAlgo=..., duration=..., postToAts=..., advancedErrorOverride=..., manualOrderTime=..., minTradeQty=..., minCompeteSize=..., competeAgainstBestOffset=..., midOffsetAtWhole=..., midOffsetAtHalf=...) -> None: ...

class LimitOrder(Order):
    def __init__(self, action: str, totalQuantity: float, lmtPrice: float, **kwargs: Any) -> None: ...

class MarketOrder(Order):
    def __init__(self, action: str, totalQuantity: float, **kwargs: Any) -> None: ...

class StopOrder(Order):
    def __init__(self, action: str, totalQuantity: float, stopPrice: float, **kwargs: Any) -> None: ...

class StopLimitOrder(Order):
    def __init__(self, action: str, totalQuantity: float, lmtPrice: float, stopPrice: float, **kwargs: Any) -> None: ...

@dataclass
class OrderStatus:
    orderId: int = ...
    status: str = ...
    filled: float = ...
    remaining: float = ...
    avgFillPrice: float = ...
    permId: int = ...
    parentId: int = ...
    lastFillPrice: float = ...
    clientId: int = ...
    whyHeld: str = ...
    mktCapPrice: float = ...
    PendingSubmit: ClassVar[str] = ...
    PendingCancel: ClassVar[str] = ...
    PreSubmitted: ClassVar[str] = ...
    Submitted: ClassVar[str] = ...
    ApiPending: ClassVar[str] = ...
    ApiCancelled: ClassVar[str] = ...
    Cancelled: ClassVar[str] = ...
    Filled: ClassVar[str] = ...
    Inactive: ClassVar[str] = ...
    DoneStates: ClassVar[frozenset[str]] = ...
    ActiveStates: ClassVar[frozenset[str]] = ...
    # def __init__(self, orderId=..., status=..., filled=..., remaining=..., avgFillPrice=..., permId=..., parentId=..., lastFillPrice=..., clientId=..., whyHeld=..., mktCapPrice=...) -> None: ...

@dataclass
class OrderState:
    status: str = ...
    initMarginBefore: str = ...
    maintMarginBefore: str = ...
    equityWithLoanBefore: str = ...
    initMarginChange: str = ...
    maintMarginChange: str = ...
    equityWithLoanChange: str = ...
    initMarginAfter: str = ...
    maintMarginAfter: str = ...
    equityWithLoanAfter: str = ...
    commission: float = ...
    minCommission: float = ...
    maxCommission: float = ...
    commissionCurrency: str = ...
    warningText: str = ...
    completedTime: str = ...
    completedStatus: str = ...
    # def __init__(self, status=..., initMarginBefore=..., maintMarginBefore=..., equityWithLoanBefore=..., initMarginChange=..., maintMarginChange=..., equityWithLoanChange=..., initMarginAfter=..., maintMarginAfter=..., equityWithLoanAfter=..., commission=..., minCommission=..., maxCommission=..., commissionCurrency=..., warningText=..., completedTime=..., completedStatus=...) -> None: ...

@dataclass
class OrderComboLeg:
    price: float = ...
    # def __init__(self, price=...) -> None: ...

@dataclass
class Trade:
    contract: Contract = ...
    order: Order = ...
    orderStatus: OrderStatus = ...
    fills: list[Fill] = ...
    log: list[TradeLogEntry] = ...
    advancedError: str = ...
    events: ClassVar = ...
    statusEvent = ...
    modifyEvent = ...
    fillEvent = ...
    commissionReportEvent = ...
    filledEvent = ...
    cancelEvent = ...
    cancelledEvent = ...
    def __post_init__(self) -> None: ...
    def isActive(self) -> bool: ...
    def isDone(self) -> bool: ...
    def filled(self) -> float: ...
    def remaining(self) -> float: ...
    # def __init__(self, contract=..., order=..., orderStatus=..., fills=..., log=..., advancedError=...) -> None: ...

class BracketOrder(NamedTuple):
    parent: Order
    takeProfit: Order
    stopLoss: Order

@dataclass
class OrderCondition:
    # @staticmethod
    # def createClass(condType): ...
    # conjunction: str = ...
    pass
    # def And(self): ...
    # def Or(self): ...

@dataclass
class PriceCondition(OrderCondition):
    condType: int = ...
    conjunction: str = ...
    isMore: bool = ...
    price: float = ...
    conId: int = ...
    exch: str = ...
    triggerMethod: int = ...
    # def __init__(self, condType=..., conjunction=..., isMore=..., price=..., conId=..., exch=..., triggerMethod=...) -> None: ...

@dataclass
class TimeCondition(OrderCondition):
    condType: int = ...
    conjunction: str = ...
    isMore: bool = ...
    time: str = ...
    # def __init__(self, condType=..., conjunction=..., isMore=..., time=...) -> None: ...

@dataclass
class MarginCondition(OrderCondition):
    condType: int = ...
    conjunction: str = ...
    isMore: bool = ...
    percent: int = ...
    # def __init__(self, condType=..., conjunction=..., isMore=..., percent=...) -> None: ...

@dataclass
class ExecutionCondition(OrderCondition):
    condType: int = ...
    conjunction: str = ...
    secType: str = ...
    exch: str = ...
    symbol: str = ...
    # def __init__(self, condType=..., conjunction=..., secType=..., exch=..., symbol=...) -> None: ...

@dataclass
class VolumeCondition(OrderCondition):
    condType: int = ...
    conjunction: str = ...
    isMore: bool = ...
    volume: int = ...
    conId: int = ...
    exch: str = ...
    # def __init__(self, condType=..., conjunction=..., isMore=..., volume=..., conId=..., exch=...) -> None: ...

@dataclass
class PercentChangeCondition(OrderCondition):
    condType: int = ...
    conjunction: str = ...
    isMore: bool = ...
    changePercent: float = ...
    conId: int = ...
    exch: str = ...
    # def __init__(self, condType=..., conjunction=..., isMore=..., changePercent=..., conId=..., exch=...) -> None: ...
