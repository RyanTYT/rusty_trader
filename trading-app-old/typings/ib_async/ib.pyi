import datetime
from eventkit import Event as Event  # type: ignore
from _typeshed import Incomplete
from enum import Flag
from ib_async.client import Client as Client
from ib_async.contract import Contract as Contract, ContractDescription as ContractDescription, ContractDetails as ContractDetails
from ib_async.objects import AccountValue as AccountValue, BarDataList as BarDataList, DepthMktDataDescription as DepthMktDataDescription, Execution as Execution, ExecutionFilter as ExecutionFilter, Fill as Fill, HistogramData as HistogramData, HistoricalNews as HistoricalNews, HistoricalSchedule as HistoricalSchedule, NewsArticle as NewsArticle, NewsBulletin as NewsBulletin, NewsProvider as NewsProvider, NewsTick as NewsTick, OptionChain as OptionChain, OptionComputation as OptionComputation, PnL as PnL, PnLSingle as PnLSingle, PortfolioItem as PortfolioItem, Position as Position, PriceIncrement as PriceIncrement, RealTimeBarList as RealTimeBarList, ScanDataList as ScanDataList, ScannerSubscription as ScannerSubscription, SmartComponent as SmartComponent, TradeLogEntry as TradeLogEntry, WshEventData as WshEventData
from ib_async.order import BracketOrder as BracketOrder, LimitOrder as LimitOrder, Order as Order, OrderState as OrderState, OrderStatus as OrderStatus, StopOrder as StopOrder, Trade as Trade, TagValue as TagValue
from ib_async.ticker import Ticker as Ticker
from ib_async.wrapper import Wrapper as Wrapper
from typing import Awaitable, Iterator, Any


class StartupFetch(Flag):
    POSITIONS = ...
    ORDERS_OPEN = ...
    ORDERS_COMPLETE = ...
    ACCOUNT_UPDATES = ...
    SUB_ACCOUNT_UPDATES = ...
    EXECUTIONS = ...


StartupFetchNONE: Incomplete
StartupFetchALL: Incomplete


class IB:
    events: Incomplete
    newOrderEvent: Event
    execDetailsEvent: Event
    RequestTimeout: float
    RaiseRequestErrors: bool
    MaxSyncedSubAccounts: int
    TimezoneTWS: str
    wrapper: Incomplete
    client: Incomplete
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...
    # def __enter__(self): ...
    # def __exit__(self, *_exc) -> None: ...
    def connect(self, host: str = '127.0.0.1', port: int = 7497, clientId: int = 1, timeout: float = 4, readonly: bool = False, account: str = '', raiseSyncErrors: bool = False, fetchFields: StartupFetch = ...) -> None: ...
    def disconnect(self) -> None: ...
    def isConnected(self) -> bool: ...
    run: Incomplete
    schedule: Incomplete
    sleep: Incomplete
    timeRange: Incomplete
    timeRangeAsync: Incomplete
    waitUntil: Incomplete
    def waitOnUpdate(self, timeout: float = 0) -> bool: ...
    def loopUntil(self, condition: Incomplete | None = None, timeout: float = 0) -> Iterator[object]: ...
    def setTimeout(self, timeout: float = 60) -> None: ...
    def managedAccounts(self) -> list[str]: ...
    def accountValues(self, account: str = '') -> list[AccountValue]: ...
    def accountSummary(self, account: str = '') -> list[AccountValue]: ...
    def portfolio(self, account: str = '') -> list[PortfolioItem]: ...
    def positions(self, account: str = '') -> list[Position]: ...
    def pnl(self, account: str = '', modelCode: str = '') -> list[PnL]: ...
    def pnlSingle(self, account: str = '', modelCode: str = '', conId: int = 0) -> list[PnLSingle]: ...
    def trades(self) -> list[Trade]: ...
    def openTrades(self) -> list[Trade]: ...
    def orders(self) -> list[Order]: ...
    def openOrders(self) -> list[Order]: ...
    def fills(self) -> list[Fill]: ...
    def executions(self) -> list[Execution]: ...
    def ticker(self, contract: Contract) -> Ticker | None: ...
    def tickers(self) -> list[Ticker]: ...
    def pendingTickers(self) -> list[Ticker]: ...
    def realtimeBars(self) -> list[BarDataList | RealTimeBarList]: ...
    def newsTicks(self) -> list[NewsTick]: ...
    def newsBulletins(self) -> list[NewsBulletin]: ...
    def reqTickers(self, *contracts: Contract, regulatorySnapshot: bool = False) -> list[Ticker]: ...
    def qualifyContracts(self, *contracts: Contract) -> list[Contract]: ...
    def bracketOrder(self, action: str, quantity: float, limitPrice: float, takeProfitPrice: float, stopLossPrice: float, **kwargs: Any) -> BracketOrder: ...
    @staticmethod
    def oneCancelsAll(orders: list[Order], ocaGroup: str, ocaType: int) -> list[Order]: ...
    def whatIfOrder(self, contract: Contract, order: Order) -> OrderState: ...
    def placeOrder(self, contract: Contract, order: Order) -> Trade: ...
    def cancelOrder(self, order: Order, manualCancelOrderTime: str = '') -> Trade | None: ...
    def reqGlobalCancel(self) -> None: ...
    def reqCurrentTime(self) -> datetime.datetime: ...
    def reqAccountUpdates(self, account: str = '') -> None: ...
    def reqAccountUpdatesMulti(self, account: str = '', modelCode: str = '') -> None: ...
    def reqAccountSummary(self) -> None: ...
    def reqAutoOpenOrders(self, autoBind: bool = True) -> None: ...
    def reqOpenOrders(self) -> list[Trade]: ...
    def reqAllOpenOrders(self) -> list[Trade]: ...
    def reqCompletedOrders(self, apiOnly: bool) -> list[Trade]: ...
    def reqExecutions(self, execFilter: ExecutionFilter | None = None) -> list[Fill]: ...
    def reqPositions(self) -> list[Position]: ...
    def reqPnL(self, account: str, modelCode: str = '') -> PnL: ...
    def cancelPnL(self, account: str, modelCode: str = '') -> None: ...
    def reqPnLSingle(self, account: str, modelCode: str, conId: int) -> PnLSingle: ...
    def cancelPnLSingle(self, account: str, modelCode: str, conId: int) -> None: ...
    def reqContractDetails(self, contract: Contract) -> list[ContractDetails]: ...
    def reqMatchingSymbols(self, pattern: str) -> list[ContractDescription]: ...
    def reqMarketRule(self, marketRuleId: int) -> PriceIncrement: ...
    def reqRealTimeBars(self, contract: Contract, barSize: int, whatToShow: str, useRTH: bool, realTimeBarsOptions: list[TagValue] = []) -> RealTimeBarList: ...
    def cancelRealTimeBars(self, bars: RealTimeBarList) -> None: ...
    def reqHistoricalData(self, contract: Contract, endDateTime: datetime.datetime | datetime.date | str | None, durationStr: str, barSizeSetting: str, whatToShow: str, useRTH: bool, formatDate: int = 1, keepUpToDate: bool = False, chartOptions: list[TagValue] = [], timeout: float = 60) -> BarDataList: ...
    def cancelHistoricalData(self, bars: BarDataList) -> None: ...
    def reqHistoricalSchedule(self, contract: Contract, numDays: int, endDateTime: datetime.datetime | datetime.date | str | None = '', useRTH: bool = True) -> HistoricalSchedule: ...
    def reqHistoricalTicks(self, contract: Contract, startDateTime: str | datetime.date, endDateTime: str | datetime.date, numberOfTicks: int, whatToShow: str, useRth: bool, ignoreSize: bool = False, miscOptions: list[TagValue] = []) -> list[Any]: ...
    def reqMarketDataType(self, marketDataType: int) -> None: ...
    def reqHeadTimeStamp(self, contract: Contract, whatToShow: str, useRTH: bool, formatDate: int = 1) -> datetime.datetime: ...
    def reqMktData(self, contract: Contract, genericTickList: str = '', snapshot: bool = False, regulatorySnapshot: bool = False, mktDataOptions: list[TagValue] = []) -> Ticker: ...
    def cancelMktData(self, contract: Contract) -> None: ...
    def reqTickByTickData(self, contract: Contract, tickType: str, numberOfTicks: int = 0, ignoreSize: bool = False) -> Ticker: ...
    def cancelTickByTickData(self, contract: Contract, tickType: str) -> None: ...
    def reqSmartComponents(self, bboExchange: str) -> list[SmartComponent]: ...
    def reqMktDepthExchanges(self) -> list[DepthMktDataDescription]: ...
    def reqMktDepth(self, contract: Contract, numRows: int = 5, isSmartDepth: bool = False, mktDepthOptions: Incomplete | None = None) -> Ticker: ...
    def cancelMktDepth(self, contract: Contract, isSmartDepth: bool = False) -> None: ...
    def reqHistogramData(self, contract: Contract, useRTH: bool, period: str) -> list[HistogramData]: ...
    def reqFundamentalData(self, contract: Contract, reportType: str, fundamentalDataOptions: list[TagValue] = []) -> str: ...
    def reqScannerData(self, subscription: ScannerSubscription, scannerSubscriptionOptions: list[TagValue] = [], scannerSubscriptionFilterOptions: list[TagValue] = []) -> ScanDataList: ...
    def reqScannerSubscription(self, subscription: ScannerSubscription, scannerSubscriptionOptions: list[TagValue] = [], scannerSubscriptionFilterOptions: list[TagValue] = []) -> ScanDataList: ...
    def cancelScannerSubscription(self, dataList: ScanDataList) -> None: ...
    def reqScannerParameters(self) -> str: ...
    def calculateImpliedVolatility(self, contract: Contract, optionPrice: float, underPrice: float, implVolOptions: list[TagValue] = []) -> OptionComputation: ...
    def calculateOptionPrice(self, contract: Contract, volatility: float, underPrice: float, optPrcOptions: list[TagValue] = []) -> OptionComputation: ...
    def reqSecDefOptParams(self, underlyingSymbol: str, futFopExchange: str, underlyingSecType: str, underlyingConId: int) -> list[OptionChain]: ...
    def exerciseOptions(self, contract: Contract, exerciseAction: int, exerciseQuantity: int, account: str, override: int) -> None: ...
    def reqNewsProviders(self) -> list[NewsProvider]: ...
    def reqNewsArticle(self, providerCode: str, articleId: str, newsArticleOptions: list[TagValue] = []) -> NewsArticle: ...
    def reqHistoricalNews(self, conId: int, providerCodes: str, startDateTime: str | datetime.date, endDateTime: str | datetime.date, totalResults: int, historicalNewsOptions: list[TagValue] = []) -> HistoricalNews: ...
    def reqNewsBulletins(self, allMessages: bool) -> None: ...
    def cancelNewsBulletins(self) -> None: ...
    def requestFA(self, faDataType: int) -> None: ...
    def replaceFA(self, faDataType: int, xml: str) -> None: ...
    def reqWshMetaData(self) -> None: ...
    def cancelWshMetaData(self) -> None: ...
    def reqWshEventData(self, data: WshEventData) -> None: ...
    def cancelWshEventData(self) -> None: ...
    def getWshMetaData(self) -> str: ...
    def getWshEventData(self, data: WshEventData) -> str: ...
    def reqUserInfo(self) -> str: ...
    async def connectAsync(self, host: str = '127.0.0.1', port: int = 7497, clientId: int = 1, timeout: float | None = 4, readonly: bool = False, account: str = '', raiseSyncErrors: bool = False, fetchFields: StartupFetch = ...) -> None: ...
    async def qualifyContractsAsync(self, *contracts: Contract) -> list[Contract]: ...
    async def reqTickersAsync(self, *contracts: Contract, regulatorySnapshot: bool = False) -> list[Ticker]: ...
    def whatIfOrderAsync(self, contract: Contract, order: Order) -> Awaitable[OrderState]: ...
    def reqCurrentTimeAsync(self) -> Awaitable[datetime.datetime]: ...
    def reqAccountUpdatesAsync(self, account: str) -> Awaitable[None]: ...
    def reqAccountUpdatesMultiAsync(self, account: str, modelCode: str = '') -> Awaitable[None]: ...
    async def accountSummaryAsync(self, account: str = '') -> list[AccountValue]: ...
    def reqAccountSummaryAsync(self) -> Awaitable[None]: ...
    def reqOpenOrdersAsync(self) -> Awaitable[list[Trade]]: ...
    def reqAllOpenOrdersAsync(self) -> Awaitable[list[Trade]]: ...
    def reqCompletedOrdersAsync(self, apiOnly: bool) -> Awaitable[list[Trade]]: ...
    def reqExecutionsAsync(self, execFilter: ExecutionFilter | None = None) -> Awaitable[list[Fill]]: ...
    def reqPositionsAsync(self) -> Awaitable[list[Position]]: ...
    def reqContractDetailsAsync(self, contract: Contract) -> Awaitable[list[ContractDetails]]: ...
    async def reqMatchingSymbolsAsync(self, pattern: str) -> list[ContractDescription] | None: ...
    async def reqMarketRuleAsync(self, marketRuleId: int) -> list[PriceIncrement] | None: ...
    async def reqHistoricalDataAsync(self, contract: Contract, endDateTime: datetime.datetime | datetime.date | str | None, durationStr: str, barSizeSetting: str, whatToShow: str, useRTH: bool, formatDate: int = 1, keepUpToDate: bool = False, chartOptions: list[TagValue] = [], timeout: float = 60) -> BarDataList: ...
    def reqHistoricalScheduleAsync(self, contract: Contract, numDays: int, endDateTime: datetime.datetime | datetime.date | str | None = '', useRTH: bool = True) -> Awaitable[HistoricalSchedule]: ...
    def reqHistoricalTicksAsync(self, contract: Contract, startDateTime: str | datetime.date, endDateTime: str | datetime.date, numberOfTicks: int, whatToShow: str, useRth: bool, ignoreSize: bool = False, miscOptions: list[TagValue] = []) -> Awaitable[list[Any]]: ...
    async def reqHeadTimeStampAsync(self, contract: Contract, whatToShow: str, useRTH: bool, formatDate: int) -> datetime.datetime: ...
    def reqSmartComponentsAsync(self, bboExchange: str) -> None: ...
    def reqMktDepthExchangesAsync(self) -> Awaitable[list[DepthMktDataDescription]]: ...
    def reqHistogramDataAsync(self, contract: Contract, useRTH: bool, period: str) -> Awaitable[list[HistogramData]]: ...
    def reqFundamentalDataAsync(self, contract: Contract, reportType: str, fundamentalDataOptions: list[TagValue] = []) -> Awaitable[str]: ...
    async def reqScannerDataAsync(self, subscription: ScannerSubscription, scannerSubscriptionOptions: list[TagValue] = [], scannerSubscriptionFilterOptions: list[TagValue] = []) -> ScanDataList: ...
    def reqScannerParametersAsync(self) -> Awaitable[str]: ...
    async def calculateImpliedVolatilityAsync(self, contract: Contract, optionPrice: float, underPrice: float, implVolOptions: list[TagValue] = []) -> OptionComputation | None: ...
    async def calculateOptionPriceAsync(self, contract: Contract, volatility: float, underPrice: float, optPrcOptions: list[TagValue] = []) -> OptionComputation | None: ...
    def reqSecDefOptParamsAsync(self, underlyingSymbol: str, futFopExchange: str, underlyingSecType: str, underlyingConId: int) -> Awaitable[list[OptionChain]]: ...
    def reqNewsProvidersAsync(self) -> Awaitable[list[NewsProvider]]: ...
    def reqNewsArticleAsync(self, providerCode: str, articleId: str, newsArticleOptions: list[TagValue] = []) -> Awaitable[NewsArticle]: ...
    async def reqHistoricalNewsAsync(self, conId: int, providerCodes: str, startDateTime: str | datetime.date, endDateTime: str | datetime.date, totalResults: int, historicalNewsOptions: list[TagValue] = []) -> HistoricalNews | None: ...
    async def requestFAAsync(self, faDataType: int) -> None: ...
    async def getWshMetaDataAsync(self) -> str: ...
    async def getWshEventDataAsync(self, data: WshEventData) -> str: ...
    def reqUserInfoAsync(self) -> None: ...
