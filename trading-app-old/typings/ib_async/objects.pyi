from .contract import Contract as Contract, ScanData as ScanData, TagValue as TagValue
from .util import EPOCH as EPOCH, UNSET_DOUBLE as UNSET_DOUBLE, UNSET_INTEGER as UNSET_INTEGER
from _typeshed import Incomplete
from dataclasses import dataclass
from datetime import date as date_, datetime
from typing import NamedTuple, Any

nan: Incomplete


@dataclass
class ScannerSubscription:
    numberOfRows: int = ...
    instrument: str = ...
    locationCode: str = ...
    scanCode: str = ...
    abovePrice: float = ...
    belowPrice: float = ...
    aboveVolume: int = ...
    marketCapAbove: float = ...
    marketCapBelow: float = ...
    moodyRatingAbove: str = ...
    moodyRatingBelow: str = ...
    spRatingAbove: str = ...
    spRatingBelow: str = ...
    maturityDateAbove: str = ...
    maturityDateBelow: str = ...
    couponRateAbove: float = ...
    couponRateBelow: float = ...
    excludeConvertible: bool = ...
    averageOptionVolumeAbove: int = ...
    scannerSettingPairs: str = ...
    stockTypeFilter: str = ...
    # def __init__(self, numberOfRows=..., instrument=..., locationCode=..., scanCode=..., abovePrice=..., belowPrice=..., aboveVolume=..., marketCapAbove=..., marketCapBelow=..., moodyRatingAbove=..., moodyRatingBelow=..., spRatingAbove=..., spRatingBelow=..., maturityDateAbove=..., maturityDateBelow=..., couponRateAbove=..., couponRateBelow=..., excludeConvertible=..., averageOptionVolumeAbove=..., scannerSettingPairs=..., stockTypeFilter=...) -> None: ...


@dataclass
class SoftDollarTier:
    name: str = ...
    val: str = ...
    displayName: str = ...
    def __bool__(self) -> bool: ...
    # def __init__(self, name=..., val=..., displayName=...) -> None: ...


@dataclass
class Execution:
    execId: str = ...
    time: datetime = ...
    acctNumber: str = ...
    exchange: str = ...
    side: str = ...
    shares: float = ...
    price: float = ...
    permId: int = ...
    clientId: int = ...
    orderId: int = ...
    liquidation: int = ...
    cumQty: float = ...
    avgPrice: float = ...
    orderRef: str = ...
    evRule: str = ...
    evMultiplier: float = ...
    modelCode: str = ...
    lastLiquidity: int = ...
    pendingPriceRevision: bool = ...
    # def __init__(self, execId=..., time=..., acctNumber=..., exchange=..., side=..., shares=..., price=..., permId=..., clientId=..., orderId=..., liquidation=..., cumQty=..., avgPrice=..., orderRef=..., evRule=..., evMultiplier=..., modelCode=..., lastLiquidity=..., pendingPriceRevision=...) -> None: ...


@dataclass
class CommissionReport:
    execId: str = ...
    commission: float = ...
    currency: str = ...
    realizedPNL: float = ...
    yield_: float = ...
    yieldRedemptionDate: int = ...
    # def __init__(self, execId=..., commission=..., currency=..., realizedPNL=..., yield_=..., yieldRedemptionDate=...) -> None: ...


@dataclass
class ExecutionFilter:
    clientId: int = ...
    acctCode: str = ...
    time: str = ...
    symbol: str = ...
    secType: str = ...
    exchange: str = ...
    side: str = ...
    # def __init__(self, clientId=..., acctCode=..., time=..., symbol=..., secType=..., exchange=..., side=...) -> None: ...


@dataclass
class BarData:
    date: date_ | datetime = ...
    open: float = ...
    high: float = ...
    low: float = ...
    close: float = ...
    volume: float = ...
    average: float = ...
    barCount: int = ...
    # def __init__(self, date=..., open=..., high=..., low=..., close=..., volume=..., average=..., barCount=...) -> None: ...


@dataclass
class RealTimeBar:
    time: datetime = ...
    endTime: int = ...
    open_: float = ...
    high: float = ...
    low: float = ...
    close: float = ...
    volume: float = ...
    wap: float = ...
    count: int = ...
    # def __init__(self, time=..., endTime=..., open_=..., high=..., low=..., close=..., volume=..., wap=..., count=...) -> None: ...


@dataclass
class TickAttrib:
    canAutoExecute: bool = ...
    pastLimit: bool = ...
    preOpen: bool = ...
    # def __init__(self, canAutoExecute=..., pastLimit=..., preOpen=...) -> None: ...


@dataclass
class TickAttribBidAsk:
    bidPastLow: bool = ...
    askPastHigh: bool = ...
    # def __init__(self, bidPastLow=..., askPastHigh=...) -> None: ...


@dataclass
class TickAttribLast:
    pastLimit: bool = ...
    unreported: bool = ...
    # def __init__(self, pastLimit=..., unreported=...) -> None: ...


@dataclass
class HistogramData:
    price: float = ...
    count: int = ...
    # def __init__(self, price=..., count=...) -> None: ...


@dataclass
class NewsProvider:
    code: str = ...
    name: str = ...
    # def __init__(self, code=..., name=...) -> None: ...


@dataclass
class DepthMktDataDescription:
    exchange: str = ...
    secType: str = ...
    listingExch: str = ...
    serviceDataType: str = ...
    aggGroup: int = ...
    # def __init__(self, exchange=..., secType=..., listingExch=..., serviceDataType=..., aggGroup=...) -> None: ...


@dataclass
class PnL:
    account: str = ...
    modelCode: str = ...
    dailyPnL: float = ...
    unrealizedPnL: float = ...
    realizedPnL: float = ...
    # def __init__(self, account=..., modelCode=..., dailyPnL=..., unrealizedPnL=..., realizedPnL=...) -> None: ...


@dataclass
class TradeLogEntry:
    time: datetime
    status: str = ...
    message: str = ...
    errorCode: int = ...
    # def __init__(self, time, status=..., message=..., errorCode=...) -> None: ...


@dataclass
class PnLSingle:
    account: str = ...
    modelCode: str = ...
    conId: int = ...
    dailyPnL: float = ...
    unrealizedPnL: float = ...
    realizedPnL: float = ...
    position: int = ...
    value: float = ...
    # def __init__(self, account=..., modelCode=..., conId=..., dailyPnL=..., unrealizedPnL=..., realizedPnL=..., position=..., value=...) -> None: ...


@dataclass
class HistoricalSession:
    startDateTime: str = ...
    endDateTime: str = ...
    refDate: str = ...
    # def __init__(self, startDateTime=..., endDateTime=..., refDate=...) -> None: ...


@dataclass
class HistoricalSchedule:
    startDateTime: str = ...
    endDateTime: str = ...
    timeZone: str = ...
    sessions: list[HistoricalSession] = ...
    # def __init__(self, startDateTime=..., endDateTime=..., timeZone=..., sessions=...) -> None: ...


@dataclass
class WshEventData:
    conId: int = ...
    filter: str = ...
    fillWatchlist: bool = ...
    fillPortfolio: bool = ...
    fillCompetitors: bool = ...
    startDate: str = ...
    endDate: str = ...
    totalLimit: int = ...
    # def __init__(self, conId=..., filter=..., fillWatchlist=..., fillPortfolio=..., fillCompetitors=..., startDate=..., endDate=..., totalLimit=...) -> None: ...


class AccountValue(NamedTuple):
    account: str
    tag: str
    value: str
    currency: str
    modelCode: str


class TickData(NamedTuple):
    time: datetime
    tickType: int
    price: float
    size: float


class HistoricalTick(NamedTuple):
    time: datetime
    price: float
    size: float


class HistoricalTickBidAsk(NamedTuple):
    time: datetime
    tickAttribBidAsk: TickAttribBidAsk
    priceBid: float
    priceAsk: float
    sizeBid: float
    sizeAsk: float


class HistoricalTickLast(NamedTuple):
    time: datetime
    tickAttribLast: TickAttribLast
    price: float
    size: float
    exchange: str
    specialConditions: str


class TickByTickAllLast(NamedTuple):
    tickType: int
    time: datetime
    price: float
    size: float
    tickAttribLast: TickAttribLast
    exchange: str
    specialConditions: str


class TickByTickBidAsk(NamedTuple):
    time: datetime
    bidPrice: float
    askPrice: float
    bidSize: float
    askSize: float
    tickAttribBidAsk: TickAttribBidAsk


class TickByTickMidPoint(NamedTuple):
    time: datetime
    midPoint: float


class MktDepthData(NamedTuple):
    time: datetime
    position: int
    marketMaker: str
    operation: int
    side: int
    price: float
    size: float


class DOMLevel(NamedTuple):
    price: float
    size: float
    marketMaker: str


class PriceIncrement(NamedTuple):
    lowEdge: float
    increment: float


class PortfolioItem(NamedTuple):
    contract: Contract
    position: float
    marketPrice: float
    marketValue: float
    averageCost: float
    unrealizedPNL: float
    realizedPNL: float
    account: str


class Position(NamedTuple):
    account: str
    contract: Contract
    position: float
    avgCost: float


class Fill(NamedTuple):
    contract: Contract
    execution: Execution
    commissionReport: CommissionReport
    time: datetime


class OptionComputation(NamedTuple):
    tickAttrib: int
    impliedVol: float | None
    delta: float | None
    optPrice: float | None
    pvDividend: float | None
    gamma: float | None
    vega: float | None
    theta: float | None
    undPrice: float | None


class OptionChain(NamedTuple):
    exchange: str
    underlyingConId: int
    tradingClass: str
    multiplier: str
    expirations: list[str]
    strikes: list[float]


class Dividends(NamedTuple):
    past12Months: float | None
    next12Months: float | None
    nextDate: date_ | None
    nextAmount: float | None


class NewsArticle(NamedTuple):
    articleType: int
    articleText: str


class HistoricalNews(NamedTuple):
    time: datetime
    providerCode: str
    articleId: str
    headline: str


class NewsTick(NamedTuple):
    timeStamp: int
    providerCode: str
    articleId: str
    headline: str
    extraData: str


class NewsBulletin(NamedTuple):
    msgId: int
    msgType: int
    message: str
    origExchange: str


class FamilyCode(NamedTuple):
    accountID: str
    familyCodeStr: str


class SmartComponent(NamedTuple):
    bitNumber: int
    exchange: str
    exchangeLetter: str


class ConnectionStats(NamedTuple):
    startTime: float
    duration: float
    numBytesRecv: int
    numBytesSent: int
    numMsgRecv: int
    numMsgSent: int


class BarDataList(list[BarData]):
    reqId: int
    contract: Contract
    endDateTime: datetime | date_ | str | None
    durationStr: str
    barSizeSetting: str
    whatToShow: str
    useRTH: bool
    formatDate: int
    keepUpToDate: bool
    chartOptions: list[TagValue]
    updateEvent: Incomplete
    # def __init__(self, *args) -> None: ...
    # def __eq__(self, other): ...
    # def __hash__(self): ...


class RealTimeBarList(list[RealTimeBar]):
    reqId: int
    contract: Contract
    barSize: int
    whatToShow: str
    useRTH: bool
    realTimeBarsOptions: list[TagValue]
    updateEvent: Incomplete
    # def __init__(self, *args) -> None: ...
    # def __eq__(self, other): ...
    # def __hash__(self): ...


class ScanDataList(list[ScanData]):
    reqId: int
    subscription: ScannerSubscription
    scannerSubscriptionOptions: list[TagValue]
    scannerSubscriptionFilterOptions: list[TagValue]
    updateEvent: Incomplete
    # def __init__(self, *args) -> None: ...
    # def __eq__(self, other): ...
    # def __hash__(self): ...


class DynamicObject:
    def __init__(self, **kwargs: Any) -> None: ...


class FundamentalRatios(DynamicObject):
    ...
